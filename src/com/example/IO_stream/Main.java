package com.example.IO_stream;


//По историческим причинам на разных платформах принят разный способ обозначения конца строки в текстовом файле.
// На Unix-системах конец строки обозначается символом с кодом 10 ('\n'), на Windows — двумя последовательными символами с кодами 13 и 10 ('\r' '\n').
//
//        Напишите программу, которая будет преобразовывать переводы строк из формата Windows в формат Unix. Данные в формате Windows подаются программе
// в System.in, преобразованные данные должны выводиться в System.out. На этот раз вам надо написать программу полностью, т.е. объявить класс
// (с именем Main — таково ограничение проверяющей системы), метод main, прописать все import'ы.
//
//        Требуется заменить все вхождения пары символов '\r' и '\n' на один символ '\n'. Если на входе встречается одиночный символ '\r', за которым не следует '\n', то символ '\r' выводится без изменения.
//
//        Кодировка входных данных такова, что символ '\n' представляется байтом 10, а символ '\r' — байтом 13. Поэтому программа может осуществлять фильтрацию на уровне двоичных данных, не преобразуя байты в символы.
//
//        Из-за буферизации данных в System.out в конце вашей программы надо явно вызвать System.out.flush(). Иначе часть выведенных вами данных не будет видна проверяющей системе.
//
//        Пример
//
//        Из System.in зачитаны следующие байты: 65 13 10 10 13. Внимание! Это не строка "65 13 10 10 13", а последовательность чисел, возвращаемая методом System.in.read().
//
//        В System.out должны быть выведены байты: 65 10 10 13

//Проще всего задача решилась с помощью такого рассуждения:
//
//        1) читаем новый байт из потока и запоминаем его в переменную prev
//        2) если prev не -1, входим в цикл и читаем следующий байт из потока в переменную next, иначе переходим к пункту (6)
//        3) если prev != 13 или next != 10, выводим prev
//        4) "передвигаем" очередь путём присвоения prev = next
//        5) переходим к пункту (2)
//        6) делаем flush.


import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

class Main {

    public static void main(String[] args) throws IOException {
        checkOfStream1013(System.in, System.out);
        System.out.flush();
    }


    public static void checkOfStream1013(InputStream inputStream, OutputStream outputStream) throws IOException {

        int current = inputStream.read();
        int previous = current;
        while (current != -1) {
            current = inputStream.read();
            if (!(previous == 13 && current == 10)) {
                outputStream.write(previous);
            }
            previous = current;
        }
    }
}